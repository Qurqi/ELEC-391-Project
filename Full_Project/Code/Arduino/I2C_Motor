#include "Arduino_BMI270_BMM150.h"
#include "Wire.h"
#include "mbed.h"
#include "BasicLinearAlgebra.h"

#define motorA_input1  2
#define motorA_input2 3
#define motorB_input1 4
#define motorB_input2 5
#define motorA_pin = A6
#define motorB_pin = A7
#define PWM_FREQUENCY         750

mbed::PwmOut motorA_inputA( digitalPinToPinName( motorA_input1 ) );
mbed::PwmOut motorA_inputB( digitalPinToPinName( motorA_input2 ) );
mbed::PwmOut motorB_inputA( digitalPinToPinName( motorB_input1 ) );
mbed::PwmOut motorB_inputB( digitalPinToPinName( motorB_input2 ) );

const float ADC_STEPS = (1 << 12)-1;

char buffer[20];
char userInput;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  // intialize clock signal
  Wire.begin();
  Wire.setClock(400000);
  IMU.begin(); 
  if (!IMU.begin()) {
    Serial.println("Failed to initialize IMU!");
    while (1);
  }
  delay(100);


  // configure all motor signal pins with proper frequency
  // set all pins to low intially
  motorA_inputA.period( 1.0 / PWM_FREQUENCY ); // set pin period
  motorA_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)

  motorA_inputB.period( 1.0 / PWM_FREQUENCY );
  motorA_inputB.write( 0.0 );

  motorB_inputA.period( 1.0 / PWM_FREQUENCY );
  motorB_inputA.write( 0.0 );

  motorB_inputB.period( 1.0 / PWM_FREQUENCY );
  motorB_inputB.write( 0.0 );

}

void forward(double speed){
  motorA_inputA.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorA_inputB.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputA.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputB.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)

}

void backward(double speed){
  motorA_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorA_inputB.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputB.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
}

void reverse_one(double speed){
  motorA_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorA_inputB.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputA.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputB.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
}

void reverse_two(double speed){
  motorA_inputA.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorA_inputB.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputB.write( speed ); // express the duty cycle as a percentage (0.0 to 1.0)
}

void stop(){
  motorA_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorA_inputB.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputA.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
  motorB_inputB.write( 0.0 ); // express the duty cycle as a percentage (0.0 to 1.0)
}

void set_port(int mux_port){

  Wire.beginTransmission(0x70); // Hey Multiplexer!
  Wire.write(1 << mux_port);
  byte error = Wire.endTransmission(); // run transaction
  if (error != 0)
    Serial.println(error);

}

double read_angle_reg(){

   // Read the angle data from the registers
  int angle1 = read_register(0x0D);
  int angle2 = read_register(0x0C);

  // Combine the two bytes to get the full angle value
  int angle = (angle2 << 8) | angle1;

  return angle;
}

int read_register(uint8_t address){

  Wire.beginTransmission(0x36);
  Wire.write(address);
  Wire.endTransmission();
  Wire.requestFrom(0x36, 1); // Request 1 byte from the device
  if (Wire.available()) {
    return Wire.read(); // Read the byte
  } 
  else {
    Serial.println("No data available");
    return -1; // Return -1 if no data is available
  }

}

void verify_hall(){
// Read and parse the status register
// The status register is at address 0x0B
  int status = read_register(0x0B);
  

  Serial.print("Status Register: ");
  Serial.println(status, HEX); // Print the status in hexadecimal format

  // check bit's 3(MH),4(ML),5(MD) to see if the magent is too close
  // bit 3: 0x08 (MH) => Magnet too strong
  // bit 4: 0x10 (ML) => Magnet too weak
  // bit 5: 0x20 (MD) => Magnet detected
  // we on;y want bit 5 to be set, so we can check if the magnet is detected
  if (status & 0x20) {
    Serial.println("Magnet detected");
  } 
  else {
    Serial.println("No magnet detected");
  }
  // ensure that the magnet is positioned correctly
  if (status & 0x08) {
    Serial.println("Magnet too strong");
  } 
  else if (status & 0x10) {
    Serial.println("Magnet too weak");
  } 
  else {
    Serial.println("Magnet strength is okay");
  }


}

double get_angle(int port_no){

  set_port(port_no); // Set the multiplexer port

  // Read the angle from the registers
  double angle = read_angle_reg();

  // Verify the hall effect sensor
  set_port(0); // Set the multiplexer port again

  return angle;
}

bool increasing(float *readings,int port){

  // Check if the last read value is larger than the current value
  // If it is, return true, else return false
  readings[0] = readings[1]; // Store the last read value
  readings[1] = read_angle_reg(); // HACK. REPLACE WITH get_angle(port) WHEN MUX IS BACK
  if (readings[0] > readings[1]) {
    return false;
  } 
  else {
    return true;
  }
}

int get_rpm(int pin){

  int val = analogRead(pin);  // read the input pin
  float voltage = (val / ADC_STEPS) * 3.30;

  unsigned long int start_time = 0, end_time = 0, elapsed_time = 0;
  while(voltage > 0.2){
   val = analogRead(pin);  // read the input pin
   voltage = (val / ADC_STEPS) * 3.30;
  };
  start_time = millis();
  while (voltage < 0.79){
    val = analogRead(pin);  // read the input pin
   voltage = (val / ADC_STEPS) * 3.30;
  };
  end_time = millis();
  elapsed_time = end_time - start_time;
  double rpm = 60000.0/elapsed_time;
  
  Serial.print("RPM for motor at pin",pin,": ");// debug value
  Serial.println(rpm);
  return rpm; // Return the RPM value

}


void loop() {
  double speed = 0;
  double i = 0.0;
  
  while (1) {

    userInput = Serial.read();
    forward(i); // Move forward at the specified speed
    Serial.print("Motor A and B duty cycle: ");
    Serial.println(i);
    int rpm_A = get_rpm(motorA_pin);
    int rpm_B = get_rpm(motorB_pin);

    sprintf(buffer, "%d:%d", rpm_A, rpm_B);

    if (userInput == 'k') {
        Serial.println(i);
      }
    if (userInput == 'd') {
        Serial.println(buffer);
      }
    if (userInput == 'n') {
          i += 0.01;    
      }
    if (userInput == 'e'){
      Serial.println("Exit signal Recieved. Transmission ended");
      
      while (1);
      } 
  }
  stop(); // Stop the motors
  delay(1000); // Wait for a second before the next operation
  

  //verify_hall();
  //double angle_data = get_angle(2);
  //Serial.println("Motor B angle (Boardside Motor):");
  //Serial.println(angle_data);
  //int rpm = get_rpm(2);
  //float ADC_STEPS = (1 << 12)-1;
  //int val = analogRead(motorA_pin);  // read the input pin
  //float voltage = (val / ADC_STEPS) * 3.30;

  //while(voltage > 0.00);
  //start_time = millis();
  //while (voltage < 0) {};
  //end_time = millis();
  //elapsed_time = end_time - start_time;


  //Serial.println(voltage);          // debug value
  // Write SF register to '11' to increase filter response time

  


  

  delay(200);
  //Serial.println(rpm);

  //angle_data = get_angle(7);
  //Serial.println("Motor B angle: (MUX side motor)");
  //Serial.println(angle_data);

  // Send data to python



}


 
